# --------------------------------------------------------------------
node Stdout(instr)() {
__python__("
# Raw python code that uses the named argument given
print instr
")
}

node Stdin(trigger)(outstr) {
__python__("
outstr = raw_input('Enter Text:')
")
}

node AndBool(input1, input2)(output) {
__python__("
output = (input1 and input2)
")
}

node Add(var1, var2)(total) {
__python__("
total = var1 + var2
")
}

node UpperCase(instr)(outstr) {
__python__("
outstr = instr.upper()
")
}

node NumToWord(instr)(outstr) {
__python__("
num_dict = {'0':'ZERO', '1':'ONE', '2':'TWO', '3':'THREE', '4':'FOUR', '5':'FIVE', '6':'SIX', '7':'SEVEN', '8':'EIGHT','9':'NINE'}
if instr in num_dict:
    outstr = num_dict[instr]
else:
    outstr = instr
")
}

node RemoveNonAlpha(instr)(outstr) {
__python__("
outstr = ""
if instr.isalpha():
    outstr = instr
")
}

node TransliterateInput (instr)(outstr) {
    instr -> input:SplitterNode<a>:output -> instr:UpperCase:outstr ->
    instr:NumToWord:outstr -> instr:RemoveNonAlpha:outstr -> input:CombinerNode<a>:output ->
    outstr
}

node CommandLineOptions()(cmd_opts) {
__python__("
import sys
cmd_opts = sys.argv
")
}

node SplitListFromList(inlist, arg_to_find, num_ele)(found_list, remain_list){
__python__("
import copy
for i, ele in enumerate(inlist):
    if ele == arg_to_find:
        break
if i != len(inlist)-1:
    found_list = inlist[i+1:i+1+num_ele]
    remain_list = inlist[:i] + inlist[i+1+num_ele:]
else:
    found_list = []
    remain_list = copy.deepcopy(inlist)
")
}

node SplitItemFromList(inlist, arg_to_find)(item_present, remain_list){
__python__("
import copy
item_present = False
for i, ele in enumerate(inlist):
    if ele == arg_to_find:
        item_present = True
        break

if i != len(inlist)-1:
    remain_list = inlist[:i] + inlist[i+1:]
else:
    remain_list = copy.deepcopy(inlist)
")
}

node Exit(exit_flag, message, ret_code)(){
__python__("
import sys
if bool(exit_flag):
    print message
    sys.exit(ret_code)
")
}

node GetInputFile(opt_list)(input_file, unused_list) {
    opt_list -> inlist:SplitListFromList<a>
    "--inputfile" -> arg_to_find:SplitListFromList<a>
    1 -> num_ele:SplitListFromList<a>:found_list -> input_file
    SplitListFromList<a>:remain_list -> unused_list
}

node GetOutputFile(opt_list)(output_file, unused_list) {
    opt_list -> inlist:SplitListFromList<a>
    "--outputfile" -> arg_to_find:SplitListFromList<a>
    1 -> num_ele:SplitListFromList<a>:found_list -> output_file
    SplitListFromList<a>:remain_list -> unused_list
}

node GetHelp(opt_list)(help_requested, unused_list) {
    opt_list -> inlist:SplitItemFromList<a>
    "--help" -> arg_to_find:SplitItemFromList<a>:item_present -> help_requested
    SplitItemFromList<a>:remain_list -> unused_list
}

node GetVersion(opt_list)(version_requested, unused_list) {
    opt_list -> inlist:SplitItemFromList<a>
    "--version" -> arg_to_find:SplitItemFromList<a>:item_present -> version_requested
    SplitItemFromList<a>:remain_list -> unused_list
}

node ReadFileText(filename)(outstr) {
__python__("
fname = filename
if type(filename) == list:
    fname = filename[0]
outstr = open(fname).read()
")
}

node CharToNumber(char)(num) {
__python__("
num = ord(char) - 65
")
}

node NumberToChar(num)(char) {
__python__("
char = chr(num % 26 + 65) 
")
}

node CaesarCipher(input, key)(output) {
    input -> input:SplitterNode<a>:output -> char:CharToNumber:num ->
    var1:Add<b>:total -> num:NumberToChar:char -> input:CombinerNode<a>:output ->
    output

    key -> var2:Add<b>
}

node ProcessCommandLine(cmd_opts)(input_file, output_file, help_requested, version_requested) {
    cmd_opts -> opt_list:GetInputFile<a>:unused_list ->
    opt_list:GetOutputFile<b>:unused_list ->
    opt_list:GetHelp<c>:unused_list -> 
    opt_list:GetVersion<d>:version_requested -> version_requested

    GetHelp<c>:help_requested -> help_requested
    GetInputFile<a>:input_file -> input_file
    GetOutputFile<b>:output_file -> output_file
}

node CipherProgram()() {
    CommandLineOptions:cmd_opts -> cmd_opts:ProcessCommandLine<a>

    ProcessCommandLine<a>:version_requested -> input1:AndBool<b>
    ProcessCommandLine<a>:help_requested -> input2:AndBool<b>
    AndBool<b>:output -> test:OutputCondNode<ocd1>
    ProcessCommandLine<a>:input_file -> input:OutputCondNode<ocd1>

    OutputCondNode<ocd1>:false_out -> input:OutputCondNode<ocd2>:false_out ->
    trigger:Stdin:outstr -> input1:DataSelectorNode<ds>

    OutputCondNode<ocd1>:false_out -> test:OutputCondNode<ocd2>:true_out ->
    filename:ReadFileText:outstr -> input2:DataSelectorNode<ds>

    DataSelectorNode<ds>:output -> instr:TransliterateInput:outstr -> 
    input:CaesarCipher<cc>:output -> instr:Stdout
    5 -> key:CaesarCipher<cc>

    ProcessCommandLine<a>:output_file -> instr:Stdout

    ProcessCommandLine<a>:help_requested -> exit_flag:Exit<c>
    "You asked for help" -> message:Exit<c>
    0 -> ret_code:Exit<c>

    ProcessCommandLine<a>:version_requested -> exit_flag:Exit<e>
    "Version 0.1" -> message:Exit<e>
    0 -> ret_code:Exit<e>
}